name: Build DEB Package

on:
  push:
    branches:
      - feat/tag-build
  pull_request:
    branches:
      - feat/tag-build

jobs:
  build-deb:
    runs-on: ubuntu-latest
   
    env:
      DEB_BUILD_OPTIONS: nocheck  # or whatever options you need
    strategy:
      matrix:
        distro: [debian-bookworm, debian-bullseye, ubuntu-24.04, ubuntu-22.04]
        include:
          - distro: debian-bookworm
            image: debian:bookworm
            os: debian
            version: bookworm
          - distro: debian-bullseye
            image: debian:bullseye
            os: debian
            version: bullseye
          - distro: ubuntu-24.04
            image: ubuntu:24.04
            os: ubuntu
            version: noble
          - distro: ubuntu-22.04
            image: ubuntu:22.04
            os: ubuntu
            version: jammy
    container:
      image: ${{ matrix.image }}
    steps:
      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y build-essential devscripts debhelper autotools-dev fakeroot sed git python3-pip curl
      
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mark working directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Fetch all branches
        run: git fetch --tags

      - name: update branch name
        run: |
          safe_branch=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          sed "s|BRANCH_VERSION|$safe_branch|" configure.ac.in > configure.ac
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          
      - name: Prepare autotools
        run: |
          # Nur falls nicht schon vorhanden (optional)
          autoreconf -fi

      - name: Build .deb package
        run: |
          # baue mit dpkg-buildpackage (ohne signieren)
          dpkg-buildpackage -us -uc -d

      - name: Collect .deb artifact
        run: |
          mkdir -p artifacts/${{ matrix.os }}/${{ matrix.version }}
          mv ../libosal_*.deb artifacts/${{ matrix.os }}/${{ matrix.version }}
      
      - name: Set sanitized image name
        id: sanitize
        run: |
          version=$(dpkg-parsechangelog | sed -n 's/^Version: //p')
          echo "sanitized_image=$(echo "$version-$IMAGE" | tr '/:' '--')" >> $GITHUB_OUTPUT
        env:
          IMAGE: ${{ matrix.image }}

      - name: Upload .deb package
        uses: actions/upload-artifact@v4
        with:
          name: libosal-${{ steps.sanitize.outputs.sanitized_image }}.deb
          path: artifacts/${{ matrix.os }}/${{ matrix.version }}/*.deb

      - name: Upload to Cloudsmith
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          curl -1 -L -X POST "https://upload.cloudsmith.io/api/v1/packages/robert-burger-AdLL/libosal/" \
            -H "Authorization: Bearer $CLOUDSMITH_API_KEY" \
            -F "package=artifacts/${{ matrix.os }}/${{ matrix.version }}/libosal-${{ steps.sanitize.outputs.sanitized_image }}.deb" \
            -F "name=libosal-${{ steps.sanitize.outputs.sanitized_image }}" \
            -F "version=${{ steps.sanitize.outputs.sanitized_image }}" \
            -F "distribution={{ matrix.os }}" \
            -F "release={{ matrix.version }}"

      - name: Upload binary to Cloudsmith (Step 1: PUT)
        id: step1
        env:
          API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          OWNER="robert-burger-AdLL"
          REPO="libosal"
          FILENAME="artifacts/${{ matrix.os }}/${{ matrix.version }}/libosal-${{ steps.sanitize.outputs.sanitized_image }}.deb"
          TARGET_FILENAME="libosal-${{ steps.sanitize.outputs.sanitized_image }}.deb"
  
          echo "Uploading via PUT..."
          RESPONSE=$(curl -s -H "Authorization: token $API_KEY" \
            --upload-file "$FILENAME" \
            "https://upload.cloudsmith.io/${OWNER}/${REPO}/${TARGET_FILENAME}")
  
          echo "step1_response=$RESPONSE" >> $GITHUB_OUTPUT
  
      - name: Register package in Cloudsmith (Step 2: POST)
        env:
          API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          OWNER="robert-burger-AdLL"
          REPO="libosal"
  
          IDENTIFIER=$(echo "$STEP1_RESPONSE" | jq -r '.identifier')
  
          if [ -z "$IDENTIFIER" ] || [ "$IDENTIFIER" == "null" ]; then
            echo "‚ùå Failed to get identifier from step 1:"
            echo "$STEP1_RESPONSE"
            exit 1
          fi
  
          echo "Registering package with identifier: $IDENTIFIER"
          curl -v --fail -H "Authorization: token $API_KEY" \
            -H "Content-Type: application/json" \
            -X POST "https://api.cloudsmith.io/v1/packages/${OWNER}/${REPO}/upload/raw/" \
            -d @- <<EOF
{
  "package_file": "$IDENTIFIER",
  "name": "libosal",
  "version": "1.0.0~pre1.1",
  "summary": "testebuild",
  "description": "Uploaded via GitHub Actions with OS metadata",
  "os": "${{ matrix.os }}",
  "os_release": "${{ matrix.version }}",
  "arch": "amd64"
}
EOF
          #- name: Push
          #  id: push
          #  uses: cloudsmith-io/action@master
          #  with:
          #    api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          #    command: "push"
          #    format: "deb"
          #    owner: "cloudsmith"
          #    repo: "actions"
          #    distro: "{{ martrix.os }}"
          #    release: "{{ matrix.version }}"
          #    republish: "true" # needed ONLY if version is not changing
          #    file: "artifacts/libosal-*.deb"
          #    use-executable: "false" # Add this to use pip instead
          
          #      - name: Install Cloudsmith CLI
          #        run: pip install --break-system-packages --upgrade cloudsmith-cli
          #      
          #      - name: Upload .deb to Cloudsmith
          #        run: |
          #          find artifacts --not --regex  ".*/dgbsym/.*" -exec cloudsmith push deb --republish robert-burger-AdLL/libosal/${{ matrix.os }}/${{ matrix.version }} {} --api-key ${{ secrets.CLOUDSMITH_API_KEY }}
