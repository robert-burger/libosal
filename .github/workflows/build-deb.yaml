name: Build DEB Package

on:
  push:
    branches:
      - feat/tag-build
  pull_request:
    branches:
      - feat/tag-build

jobs:
  build-deb:
    runs-on: ubuntu-latest
   
    env:
      DEB_BUILD_OPTIONS: nocheck  # or whatever options you need
    strategy:
      matrix:
        distro: [debian-bookworm, debian-bullseye, ubuntu-24.04, ubuntu-22.04]
        include:
          - distro: debian-bookworm
            image: debian:bookworm
            os: debian
            version: bookworm
          - distro: debian-bullseye
            image: debian:bullseye
            os: debian
            version: bullseye
          - distro: ubuntu-24.04
            image: ubuntu:24.04
            os: ubuntu
            version: noble
          - distro: ubuntu-22.04
            image: ubuntu:22.04
            os: ubuntu
            version: jammy
    container:
      image: ${{ matrix.image }}
    steps:
      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y build-essential devscripts debhelper autotools-dev fakeroot sed git python3-pip curl jq
      
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mark working directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Fetch all branches
        run: git fetch --tags

      - name: update branch name
        run: |
          safe_branch=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          sed "s|BRANCH_VERSION|$safe_branch|" configure.ac.in > configure.ac
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          
      - name: Prepare autotools
        run: |
          # Nur falls nicht schon vorhanden (optional)
          autoreconf -fi

      - name: Build .deb package
        run: |
          # baue mit dpkg-buildpackage (ohne signieren)
          dpkg-buildpackage -us -uc -d

      - name: Collect .deb artifact
        run: |
          mkdir -p artifacts/${{ matrix.os }}/${{ matrix.version }}
          mv ../libosal_*.deb artifacts/${{ matrix.os }}/${{ matrix.version }}
      
      - name: Set sanitized image name
        id: sanitize
        run: |
          version=$(dpkg-parsechangelog | sed -n 's/^Version: //p')
          echo "sanitized_image=$(echo "$version-$IMAGE" | tr '/:' '--')" >> $GITHUB_OUTPUT
        env:
          IMAGE: ${{ matrix.image }}

      - name: Upload .deb package
        uses: actions/upload-artifact@v4
        with:
          name: libosal-${{ steps.sanitize.outputs.sanitized_image }}.deb
          path: artifacts/${{ matrix.os }}/${{ matrix.version }}/*.deb

      - name: Ensure package is present
        run: |
          echo "Files in workspace:"
          find *

      - name: Set up Python and install cloudsmith-cli
        run: |
          python -m pip install --upgrade pip
          pip install cloudsmith-cli


      - name: Upload to Cloudsmith (${{ matrix.os }}/${{ matrix.version }})
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          FILENAME="artifacts/${{ matrix.os }}/${{ matrix.version }}/libosal_${VERSION}_amd64.deb"
          cloudsmith push deb robert-burger-AdLL/libosal/${{ matrix.os }}/${{ matrix.version }} ${FILENAME} \
            --republish \
            --api-key "$CLOUDSMITH_API_KEY"

